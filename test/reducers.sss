// Reducers take the form |iterable, reduction, initial|
// If initial is omitted, the reduction will fail on empty collections

>>> nums := [2,-3,4]

// 'x' and 'y' are implicit variables for the reduction:
>>> |x+y| nums
=== 3

// Infix operators can be used directly:
>>> |+| nums
=== 3

>>> |_max_| nums
=== 4
>>> |_min_| nums
=== -3

>>> |*| nums
=== -24

>>> |x.abs()+y.abs()| nums
=== 9

>>> |+| n.abs() for n in nums
=== 9

>>> |(if x.abs() < y.abs() then x else y)| nums
=== 2

>>> |+| nums else 100
=== 3

>>> |+| [:Int] else 100
=== 100

>>> |x++" "++y| ["one","two","three"] else ""
=== "one two three"
