
type JSON := Str
    func as_Str(j:JSON)->Str
        return bitcast j as Str
    func from_Str(str:Str)->JSON
        return bitcast str.quoted() as JSON

>>> JSON::"true"
>>> JSON::${{"inner":{"obj":[]}}}
=== JSON::"{\"inner\":{\"obj\":[]}}"

// Verify string methods work:
>>> JSON::"abc".starts_with(JSON::"a")
=== yes
>>> JSON::$|abc|.replace(JSON::"b", JSON::"X")
=== JSON::"aXc"
>>> JSON::"true"[1]
=== t
>>> JSON::"tr" ++ JSON::"ue"
=== JSON::"true"
>>> JSON::"trueXXX"[1..4]
=== JSON::"true"
>>> ptr := &JSON::"[true"
>>> ptr.insert(`])
>>> ptr
=== &JSON::"[true]"

type SQL := Str
    func from_Str(str:Str)->SQL
        return bitcast "\x1b[0;35m'$(str.replace("'","\x1b[34;1m''\x1b[0;35m"))'\x1b[m" as SQL

    func from_Int(i:Int)->SQL
        return bitcast "\x1b[0;35m$i\x1b[m" as SQL

    func from_Num(n:Num)->SQL
        return bitcast "\x1b[0;35m$n\x1b[m" as SQL

name := "Robert'; drop table students;--"

age := 10
s := SQL::"SELECT * FROM students WHERE name = $name AND age > $age"
say (bitcast s as Str)

type Quoted := Str
    func as_Quoted(s:Str)->Quoted
        return bitcast "\x1b[0;35m\"$(s.replace('\','\\').replace('"','\"'))\"\x1b[m" as Quoted

str := "one two"
str2 := 'with "quotes" in it'
say (bitcast Quoted::$[my strings are $str and $(str2)!] as Str)

type HTML := Str
    func from_Str(s:Str)->HTML
        s = s.replace("&", "\x1b[34;1m&amp;\x1b[0;35m")
             .replace("<", "\x1b[34;1m&lt;\x1b[0;35m")
             .replace(">", "\x1b[34;1m&gt;\x1b[0;35m")
             .replace('"', "\x1b[34;1m&quot;\x1b[0;35m")
             .replace("'", "\x1b[34;1m&#39;\x1b[0;35m")

        return bitcast "\x1b[0;35m$s\x1b[m" as HTML

    func ol(strings:[Str])->HTML
        return bitcast [
            ++"<ol>\n",
            for str in strings
                c for c in HTML::$[<li>$str</li>]
            between
                "\n"[1]
            ,
            ++"\n</ol>",
        ] as HTML

    func from_table(table:{Str=>Str})->HTML
        return bitcast [
            ++"<table>\n",
            for e in table
                c for c in HTML::$[<tr><td>$e.key</td><td>$e.value</td></tr>\n]
            ,
            ++"</table>",
        ] as HTML

my_strings := ["item one", "I <3 escaping", "all done"]
my_table := {"key1"=>"value1", "key2"=>"value2"}
html := HTML::"
    <body>
    $(HTML.ol(my_strings))
    $(HTML.from_table(my_table))
    </body>
"
say (bitcast html as Str)
