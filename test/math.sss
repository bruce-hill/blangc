say "Numeric literals:"
>>> 1_000
=== 1000
>>> 0xFF
=== 255
>>> 0o777
=== 511
>>> -0o7
=== -7
>>> 0b111
=== 7
>>> 2.5
=== 2.5
>>> 2e3
=== 2000
>>> 5_i32
=== 5_i32
>>> 1f32
=== 1_f32

say "Numeric math operations:"
>>> 1+2
=== 3
>>> 10-1
=== 9
>>> 10/2
=== 5
>>> 1/2
=== 0
>>> 1.0/2
=== 0.5
>>> 10 mod 3
=== 1
>>> 4.0 mod 3.5
=== 0.5
>>> -1 mod 10
=== 9
>>> -1 mod 4.5
=== 3.5
>>> 10.0^2
=== 100
>>> 1 + 2 - 3 - 4 + 5 - 6 * 7 * 8 / 2
=== -167

// Clock arithmetic:
>>> 1 mod1 3
=== 1
>>> 0 mod1 3
=== 3
>>> 14.5 mod1 12
=== 2.5
>>> 0.5 mod1 12
=== 12.5

say "Coercion"
>>> 10 + 0.5
=== 10.5
>>> 3 * 0.5
=== 1.5
>>> 1i32 + 1i16
=== 2_i32


say "Casting:"
>>> 23.5 as Int
=== 23
>>> bitcast 23.5 as Int
>>> 23 as Num
=== 23
>>> bitcast 23 as Num

func fast_inverse_sqrt(number:Num)->Num
    x2 := number * 0.5
    y := number
    i := bitcast number as Int
    i = 0x5FE6EB50C7B537A9 - (i / 2) // what the fuck? 
    y = bitcast i as Num
    y *= (1.5 - (x2 * y * y)) // 1st iteration
    y *= (1.5 - (x2 * y * y)) // 2nd iteration, this can be removed
    y *= (1.5 - (x2 * y * y)) // 3rd iteration, this can be removed
    return y

>>> fast_inverse_sqrt(16.)
=== 0.25

say "Constants:"
>>> [Num.NaN, Num.Infinity, Num.Pi, Num.Tau]
=== [nan, inf, 3.14159, 6.28319]
>>> [Num32.NaN, Num32.Infinity, Num32.Pi, Num32.Tau]
=== [nan_f32, inf_f32, 3.14159_f32, 6.28319_f32]

>>> [Int.min, Int.max]
=== [-9223372036854775808, 9223372036854775807]
>>> [Int32.min, Int32.max]
=== [-2147483648_i32, 2147483647_i32]
>>> [Int16.min, Int16.max]
=== [-32768_i16, 32767_i16]
>>> [Int8.min, Int8.max]
=== [-128_i8, 127_i8]

say "Methods:"
>>> (-5).abs()
=== 5
>>> UInt32.random()
>>> (5.0).sqrt()
=== 2.23607
>>> Num32.atan2(x=1.f32, y=2.f32)
=== 1.10715_f32
>>> 5.0 _max_ 10.
=== 10

>>> n := 123.4567
>>> n.format(precision=12)
=== "123.456700000000"
>>> n.scientific()
=== "1.234567e+02"
>>> x := 12345
>>> x.format(12)
=== "000000012345"
>>> x.hex()
>>> "0x3039"
>>> x.octal()
=== "0o30071"

>>> Int.parse("10")
=== Success(Success=10)
>>> Int.parse("10@")
=== PartialSuccess(value=10, remainder="@")
>>> Int.parse("hello")
=== Failure(Failure=0)
>>> Int.parse("10", base=16)
=== Success(Success=16)
>>> Int.parse("10", base=10000)
=== InvalidBase(InvalidBase=0)
>>> Int.parse("FFFFFFFFFFFFFFFFFFFFF", base=16)
=== InvalidRange(InvalidRange=9223372036854775807)
>>> Num.parse("2.5")
=== Success(Success=2.5)
>>> Num.parse("1e2")
=== Success(Success=100)
>>> Num.parse("hello")
=== Failure(Failure=0)

>>> [1,2,3] + [10,20]
=== [11, 22]
>>> [10, 20] - [1, 2, 3]
=== [9, 18]
>>> [1,2,3] * 2
=== [2, 4, 6]
>>> 2*[1,2,3]
=== [2, 4, 6]

// Min/max
>>> 1 _max_.abs() -2.3
=== -2.3
>>> nums := [1, -2, 3, -4]
>>> (_max_) nums
=== 3
>>> (_min_) nums
=== -4
>>> (_max_.abs()) nums
=== -4
>>> (_min_.abs()) nums
=== 1
