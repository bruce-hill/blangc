struct Vec{x,y:Num}

>>> "$(5)"
=== "5"
>>> "$(3.14159)"
=== "3.14159"
>>> s := "world"
>>> "hello $s"
=== "hello world"
>>> "$(Vec{2.3, 4.5})"
=== "Vec{x=2.3, y=4.5}"
>>> "$([[1,2], [3,4]])"
=== "[[1, 2], [3, 4]]"
>>> "$([[Vec{2.,3.}]])"
=== "[[Vec{x=2, y=3}]]"

say "\n<-newline \x21<-bang \101<-A, backslash: \\ quote: \" done"
say "Fn: $( (x:Int,y:Int)-> x + y )"

>>> str := "Hello world"
>>> str[1] == `H
=== yes
>>> str[2..6]
=== "ello "
>>> str[..5]
=== "Hello"
>>> str[.. by -1]
=== "dlrow olleH"
>>> str[..]
=== "Hello world"
>>> str[.. by 2]
=== "Hlowrd"
>>> str[99..102]
=== ""

>>> str.replace("o", "XX")
=== "HellXX wXXrld"

>>> "  one two  ".trimmed()
=== "one two"
>>> "  one two  ".trimmed(chars=" on")
=== "e tw"
>>> "  one two  ".trimmed(trim_left=no)
=== "  one two"
>>> "one" ++ "two"
=== "onetwo"
>>> " one two three".split()
=== ["one", "two", "three"]
>>> "one,two three,four".split(",")
=== ["one", "two three", "four"]
>>> ",".join(["one", "two", "three"])
=== "one,two,three"
// say("string" + " + " + "concatenation")
// say "string repeating: $("Ha".repeated(5))"

// UTF-8 functionality:
>>> smile := "smile: ðŸ˜€"
>>> smile
=== "smile: ðŸ˜€"
say "$smile"
>>> #smile
=== 11

if yes
    i := 123
    multiline := ("
        Hello world
            (indented x4 here)
        i is $i escape: \x41

        "quotes"

        ^^^^ 2x blank line ^^^^^^
        expression: $(1 + 2)
        the end (no trailing newline)
    ")
    say "Multliline:\n<START>$multiline<END>"

>>> "foo.txt".without_suffix(".txt")
=== "foo"
>>> "foo.zip".without_suffix(".txt")
=== "foo.zip"
>>> "foo.txt".without_prefix("foo")
=== ".txt"
>>> "foo.txt".without_prefix("baz")
=== "foo.txt"
>>> "a_b_c_d"[..by 2].without_prefix("ab")
=== "cd"
