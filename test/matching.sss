
>>> if 5 is 5
    yes
else
    no
=== yes

>>> if 5 is 9
    -1
is x
    x
=== 5

>>> if -0.0 is 0.0 then yes else no
=== yes

>>> cases := [{1,2}, {3,4}, {5,6}]
>>> [
    for c in cases
        if c is {1,2}
            "first"
        is {x,4}
            "has four and $x"
        is other
            "otherwise $other"
]
=== ["first", "has four and 3", "otherwise {5, 6}"]

>>> if "two" is "one" then 1
is "two" then 2
is other then -1
=== 2

struct Vec{x,y:Num}
enum Foo := int(i:Int)=5|num(n:Num)|str(s:Str)|vec(v:Vec)|tuple(tup:{Num,Num})|null|ptr(ptr:?Int)

>>> cases := [
    Foo.int(5), Foo.num(2.3),
    Foo.vec(Vec{1,2}), Foo.vec(Vec{2,3}), Foo.vec(Vec{99,100}),
    Foo.tuple({1,2}), Foo.tuple({2,3}), Foo.tuple({99,100}),
    Foo.null, Foo.str("xxx"), Foo.str("yyy"),
    Foo.ptr(@5), Foo.ptr(!Int), Foo.ptr(@6),
]
>>> [
    for f in cases
        >>> f
        if f is int(x); num(x)
            "Int or num: $x"
        is vec(Vec{1,2})
            "one-two Vec"
        is vec(Vec{x=99})
            "99-x Vec"
        is vec(Vec{x=1,y=x})
            "one-x Vec: $x"
        is vec(v)
            "Vec: $v"
        is tuple({1,2})
            "one-two tuple"
        is tuple({99})
            "99-x tuple"
        is tuple({1,x})
            "one-x tuple: $x"
        is tuple(v)
            "tuple: $v"
        is str("xxx")
            "Str of 'x'"
        is ptr(@5)
            "Five ptr"
        is ptr(@x)
            "Nonnull ptr: $x"
        is ptr(!Int)
            "Nil ptr"
        is null
            "Null"
        is other
            "Fallback: $other"
]
=== ["Int or num: 5", "Int or num: 2.3", "one-two Vec", "Vec: Vec{x=2, y=3}", "99-x Vec", "one-two tuple", "tuple: {2, 3}", "99-x tuple", "Null", "Str of 'x'", "Fallback: Foo.str(s=\"yyy\")", "Five ptr", "Nil ptr", "Nonnull ptr: 6"]

// Binding:
if f := Foo.str("abc") is str
    >>> f
    === Foo.str(s="abc")
else
    fail "Unreachable"
