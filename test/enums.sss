type Foo := enum(A | B | C | D)

>>> "$(Foo.A)"
=== "A"

for x in [Foo.A, Foo.B, Foo.C, Foo.D]
    if x matches A
        say "$x matches A!"
    matches B
        say "$x matches B!"
    else
        say "$x matches something else"

type Baz := enum(
      Text(text:Str)
    | Integer(i:Int)
    | Vec2(x,y:Num)
    | Nil
)

bazzes := [Baz.Text("hi"), Baz.Integer(5), Baz.Vec2(2.4, 4), Baz.Nil]

for b in bazzes
    if b matches Text(?t)
        say "$t"
    matches Integer(?x); Vec2(?x)
        say "$x"
    matches Nil
        say "nil"

// Flags:
type Flags := enum(None=0 | A=1 | B=2 | C=4 | D=8)
>>> abc := Flags.A + Flags.B + Flags.C
>>> abc
=== A+B+C
>>> abc + Flags.A
=== A+B+C
>>> Flags.B in abc
=== yes
>>> Flags.D in abc
=== no
>>> abc - Flags.B
=== A+C
>>> not (Flags.A or Flags.B)
=== C+D
>>> (Flags.A+Flags.B) xor Flags.B
=== A

// Test for accessing type scopes:
func doop(b:Baz)->Baz
    return Nil
>>> doop(Text("hi"))
=== Nil
type HasBaz := struct(x:Int, b:Baz)
>>> HasBaz{Integer(3), x=9}
=== HasBaz{x=9, b=Integer{i=3}}
