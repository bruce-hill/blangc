def Foo {| A | B | C | D |}

say "$(Foo.A)"
fail unless "$(Foo.A)" == "Foo.A"

for x in [Foo.A, Foo.B, Foo.C, Foo.D]
    if x is A
        say "$x is A!"
    is B
        say "$x is B!"
    else
        say "$x is something else"

def Baz {|
    Text(Str)
    Integer(Int)
    Vec2({x:Num,y:Num})
    Nil
|}

bazzes := [Baz.Text("hi"), Baz.Integer(5), Baz.Vec2({2.4, 4}), Baz.Nil]

for b in bazzes
    if b is Text(t)
        say "$t"
    is Integer(x); Vec2(x)
        say "$x"
    is Nil
        say "nil"

// Flags:
def Flags {| None=0 | A=1 | B=2 | C=4 | D=8 |}
>>> abc := Flags.A + Flags.B + Flags.C
>>> abc
=== Flags.A+B+C
>>> abc + Flags.A
=== Flags.A+B+C
>>> Flags.B in abc
=== yes
>>> Flags.D in abc
=== no
>>> abc - Flags.B
=== Flags.A+C
>>> not (Flags.A or Flags.B)
=== Flags.C+D
>>> (Flags.A+Flags.B) xor Flags.B
=== Flags.A
