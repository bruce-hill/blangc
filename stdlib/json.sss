enum Object :=
    | Map(map:{Str=>Object})
    | List(list:[Object])
    | String(s:Str)
    | Number(n:Num)
    | Boolean(b:Bool)
    | Null
    | Invalid(invalid:JSON)

    convert j:Object as JSON
        if j matches Map(?table)
            return JSON::[`{,
                for entry in table
                    c for c in JSON::"$(Object.String(entry.key)): $(entry.value)"
                between
                    c for c in ", "
                , `}]
        matches List(?list)
            return JSON::[`[,
                for item in list
                    c for c in item as JSON
                between
                    c for c in ", "
                , `]]
        matches String(?s)
            return bitcast s.quoted() as JSON
        matches Number(?x); Boolean(?x)
            return JSON::"$x"
        matches Null
            return JSON::"null"
        matches Invalid(?js)
            fail "invalid JSON: $js"
        else
            fail

alias JSON::Str
    convert js:JSON as Str
        return bitcast js as Str

    convert js:JSON as Object
        func match(js:&JSON, pattern:JSON; inline)->Bool
            if js.starts_with(pattern)
                js[] = js[][(pattern.length+1)..]
                return yes
            else
                return no

        func match_chars(js:&JSON, chars:JSON; inline)->JSON
            rest := js.trimmed(chars, trim_right=no)
            defer js[] = rest
            matched := js[][..(js.length - rest.length)]
            return matched

        func skip_spaces(js:&JSON; inline)
            js[] = js.trimmed(JSON::" \n\r\t", trim_right=no)

        func match_str(js:&JSON)->Object
            unless match(js, JSON::$("))
                return Object.Invalid(js[])
            content := js[]
            for i,c in js[]
                if c == `"
                    js[] = js[(i+1)..]
                    return Object.String(bitcast content[..(i-1)] as Str)
            return Object.Invalid(js[])

        func match_bool(js:&JSON)->Object
            if match(js, JSON::"true")
                return Object.Boolean(yes)
            if match(js, JSON::"false")
                return Object.Boolean(no)
            return Object.Invalid(js[])

        func match_null(js:&JSON)->Object
            return (if match(js, JSON::"null") then Object.Null else Object.Invalid(js[]))

        func match_obj(js:&JSON)->Object
            unless match(js, JSON::"{")
                return Object.Invalid(js[])

            obj := &{:Str=>Object}
            repeat
                skip_spaces(js)
                key := if match_str(js) matches String(?s) then s else stop
                skip_spaces(js)
                unless match(js, JSON::":")
                    return Object.Invalid(js[])
                skip_spaces(js)
                value := match_json(js)
                obj[key] = value
                skip_spaces(js)
                stop unless match(js, JSON::",")

            unless match(js, JSON::"}")
                return Object.Invalid(js[])

            return Object.Map(obj[])

        func match_list(js:&JSON)->Object
            unless match(js, JSON::"[")
                return Object.Invalid(js[])

            skip_spaces(js)
            list := &[:Object]
            repeat
                skip_spaces(js)
                if item := match_json(js) matches Invalid
                    stop
                else
                    list.insert(item)
                
                skip_spaces(js)
                stop unless match(js, JSON::",")

            skip_spaces(js)
            unless match(js, JSON::"]")
                return Object.Invalid(js[])

            return Object.List(list[])

        func match_num(js:&JSON)->Object
            if Num.parse(bitcast js[] as Str) matches Success(?n)
                js[] = js[][(js.length+1)..]
                return Object.Number(n)
            matches PartialSuccess(value=?n, remainder=?remaining)
                js[] = (bitcast remaining as JSON)
                return Object.Number(n)
            else
                return Object.Invalid(js[])

        func match_json(js:&JSON)->Object
            if m:=match_num(js) matches Number then return m
            if m:=match_str(js) matches String then return m
            if m:=match_obj(js) matches Map then return m
            if m:=match_bool(js) matches Boolean then return m
            if m:=match_list(js) matches List then return m
            if m:=match_null(js) matches Null then return m
            return Object.Invalid(js[])

        skip_spaces(&js)
        obj := match_json(&js)
        skip_spaces(&js)
        if js.length > 0
            return Object.Invalid(js)
        return obj

    convert s:Str as JSON
        return bitcast s.quoted() as JSON

    convert b:Bool as JSON
        return (if b then JSON::"true" else JSON::"false")

    convert n:Num as JSON
        return bitcast "$n" as JSON

if IS_MAIN_PROGRAM
    >>> Object.Map({"x"=> Object.Boolean(yes), "y"=> Object.Null, "z"=> Object.List([Object.Number(1.2), Object.Number(3.4)])}) as JSON
    === JSON::"{\"x\": true, \"y\": null, \"z\": [1.2, 3.4]}"
    >>> Object.String(${"Quotes" and \\backslashes}) as JSON
    === JSON::"\"\\"Quotes\\" and \\backslashes\""
    >>> JSON::$|{"x": true}| as Object
    === Object.Map(map={"x"=>Object.Boolean(b=yes)})
    >>> JSON::$|[1,2]| as Object
    === Object.List(list=[Object.Number(n=1), Object.Number(n=2)])
    >>> x := Object.Map({"x"=> Object.String("hello")})
    >>> x.Map.map["x"].String
