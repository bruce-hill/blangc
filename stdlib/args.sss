// Parsing for command-line arguments
// Usage:
//    spec := args.spec(["v|verbose", "o|output="], ["input_file"])
//    options := when spec.parse(ARGS) matches Success(?s) then s
//    else
//        say "Usage: $PROGRAM_NAME $(spec.usage())"
//        exit 1i32

type ArgumentResult := enum(
      Success(flags:{Str=>Str}, positional:[Str])
    | InvalidArgument(arg:Str)
    | MissingValue(name:Str)
    | DuplicateValue(name:Str)
)

type Spec := struct(flag_infos:{Str=>struct(canonical:Str, needs_value:Bool)}, positional_args:[Str])
    func new(flags:[Str], positional_args=[:Str])->Spec
        flag_infos := @{:Str=>struct(canonical:Str,needs_value:Bool)}
        for flag in flags
            skip if flag.length < 1
            needs_value := flag.ends_with("=")
            if needs_value then flag = flag[..(flag.length-1)]
            arg_aliases := flag.split("| -=")
            skip if arg_aliases.length < 1
            longest := (_max_.length) arg_aliases
            for arg_alias in arg_aliases
                flag_infos[arg_alias] = {longest, needs_value}
        return Spec{flag_infos[], positional_args}

    func usage(spec:Spec)->Str
        usage := @""
        for i,entry in spec.flag_infos
            usage ++= (if entry.key.length == 1 then "-" else "--")
            usage ++= entry.key
            prev_canonical := entry.value.canonical
        between
            usage ++= (if entry.value.canonical == prev_canonical then "|" else " ")

        for pos in spec.positional_args
            usage ++= " " ++ pos
        return usage.trimmed()

    func parse(spec:Spec, args:[Str], allow_duplicates=no)->ArgumentResult
        positional := @[:Str]
        flags := @{:Str=>Str}

        args := @args
        while args.length > 0
            arg := args[1]
            args.remove(1)
            if arg == "-"
                positional.insert(arg)
            else if arg.starts_with('\-')
                positional.insert(arg[2..])
            else if arg == "--"
                positional.insert_all(args[])
                stop
            else if arg.starts_with("--")
                flag := if `= in arg
                    arg[3..].split("=")[1]
                else
                    arg[3..]

                info := if flag in spec.flag_infos
                    spec.flag_infos[flag]
                else
                    return ArgumentResult.InvalidArgument("--"++flag)
                flag = info.canonical

                value := if `= in arg
                    "=".join(arg[3..].split("=")[2..])
                else if info.needs_value
                    if args.length > 0
                        args.remove(1)
                    else
                        return ArgumentResult.MissingValue(flag)
                else
                    "yes"

                if flag in flags and not allow_duplicates
                    return ArgumentResult.DuplicateValue(flag)

                flags[flag] = value
            else if arg.starts_with("-")
                char_index := 2
                while char_index <= arg.length
                    flag := arg[char_index..char_index]
                    info := if flag in spec.flag_infos
                        spec.flag_infos[flag]
                    else
                        return ArgumentResult.InvalidArgument("-"++flag)
                    flag = info.canonical

                    value := if char_index+1 <= arg.length and arg[char_index+1] == `=
                        val := arg[(char_index+2)..]
                        char_index = arg.length+1
                        val
                    else if info.needs_value
                        if char_index+1 <= arg.length
                            val := arg[(char_index+1)..(char_index+1)]
                            char_index += 1
                            val
                        else if args.length > 0
                            args.remove(1)
                        else
                            return ArgumentResult.MissingValue(flag)
                    else
                        "yes"

                    if flag in flags and not allow_duplicates
                        return ArgumentResult.DuplicateValue(flag)

                    flags[flag] = value
                    char_index += 1
            else
                positional.insert(arg)

        for name in spec.positional_args
            stop if positional.length == 0
            flags[name] = positional[1]
            positional[1].remove()

        return ArgumentResult.Success(flags=flags[], positional=positional[])

spec := Spec.new

if IS_MAIN_PROGRAM
    >>> spec := Spec.new(["v|verbose","O=","o|output=","n|name="], ["first","second"])
    >>> spec.usage()
    >>> spec.parse(["a","-v","b","--verbose","c","--","-o"])
    >>> spec.parse(["a","-v","b","--verbose","c","--","-o"], allow_duplicates=yes)
    >>> spec.parse(["--verbose=3"])
    >>> spec.parse(["a","-v","-o"])
    >>> spec.parse(["-O1o", "foo"])
    >>> spec.parse(["-vO1o=foo"])
    >>> spec.parse(["-O1o=foo"])
    >>> spec.parse(["--name=one=two"])
    >>> spec.parse(["--name", "one=two"])
    >>> spec.parse(["--invalid"])
    >>> spec.parse(["", "-", '\-x'])
    >>> spec.parse(["-vXo=y"])
