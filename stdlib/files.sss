// Filesystem reading and manipulating library.

time := use time.sss

def FileInfo {
    device, rdevice, inode, mode, links, user, group:Int64
    size,block_size:Int64<bytes>
    block_count:Int64
    accessed, modified, moved:time.Timestamp
}

def Result {| Failure(Str) | Success |}

// Opaque struct representing C's FILE struct:
def _CFile{}

def File{raw_c_file:?_CFile}
    def line(f:@File)->Str
        return (extern get_line:(@_CFile)->Str)(f.raw_c_file or fail "File has already been closed")

    def lines(f:@File)->[Str]
        return [f.line() while not f.ended()]

    def ended(f:@File)->Bool
        return (extern feof:(@_CFile)->Int32)(f.raw_c_file or fail "File has already been closed") == 1

    def info(f:@File)->FileInfo
        file := f.raw_c_file or fail "File has already been closed"
        return (extern sss_fstat:(@_CFile)->FileInfo)(file)

    read := extern sss_readfile:(f:@File,bytes=Int64.max)->Str

    def write(f:@File, text:Str)->Result
        file := f.raw_c_file or fail "File has already been closed"
        fputc := (extern fputc:(Char,@_CFile)->Int32)
        for char in text
            wrote := fputc(char, file)
            if wrote != char as Int32
                return Result.Failure((extern last_err:()->Str)())
        return Result.Success

    def flush(f:@File)
        (extern fflush:(@_CFile)->Void)(f.raw_c_file or return)

    def rewind(f:@File)
        (extern rewind:(@_CFile)->Void)(f.raw_c_file or return)

    def close(f:@File)
        file := f.raw_c_file or return
        (extern fclose:(@_CFile)->Void)(file)
        f.raw_c_file = !_CFile

stdin := @File{extern stdin:@_CFile}
stdout := @File{extern stdout:@_CFile}
stderr := @File{extern stderr:@_CFile}

def OpenResult {| Failure(Str) | Success(@File) |}

open := extern sss_fopen:(path:Str,mode="r")->OpenResult
temporary := extern sss_tmpfile:()->@File

def move(path:Str, dest:Str)->Result
    result := (extern rename:(path:@CStringChar,dest:@CStringChar)->Int32)(path, dest)
    if result == 0
        return Result.Success
    else
        return Result.Failure((extern last_err:()->Str)())

def remove(path:Str)->Result
    result := (extern unlink:(path:@CStringChar)->Int32)(path)
    if result == 0
        return Result.Success
    else
        return Result.Failure((extern last_err:()->Str)())

def spoof(text:Str)->@File
    temporary := extern sss_tmpfile:()->@File
    f := temporary()
    _ := f.write(text)
    f.rewind()
    return f

extend $Glob
    def expand(g:$Glob  )->[Str]
        def glob_t{
            gl_pathc:Int64
            gl_pathv:?@CStringChar
            gl_offs:Int64
            gl_flags:Int32
        }
        def GlobResult{|SUCCESS=0|NOSPACE=1|ABORTED=2|NOMATCH=3|}
        do_glob := extern glob:(@CStringChar,Int32,?Void,&glob_t)->GlobResult
        flags := 17410i32 // GLOB_MARK | GLOB_BRACE | GLOB_TILDE_CHECK
        globbuf := glob_t{}
        result := do_glob((bitcast g as Str).c_string(), flags, !Void, &globbuf)
        globfree := extern globfree:(&glob_t)->Void
        defer globfree(&globbuf)
        if result is SUCCESS
            c_ptrs := bitcast ({globbuf.gl_pathv or fail, globbuf.gl_pathc as Int32, 1i16, 0i16}) as [@CStringChar]
            paths := [Str.from_pointer(cstr) for cstr in c_ptrs]
            return [for p in paths if not p.ends_with("/./") and not p.ends_with("/../") then p else skip]
        is _
            return [:Str]

def s:Str as $Glob
    return bitcast ([
        for c in s
            if c is `\;`{;`};`*;`?;`[;`]
                ++[`\, c]
            is plain
                ++[plain]
    ]) as $Glob
