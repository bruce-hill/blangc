// A library for handling some unicode functionality using libunistring

!link -lunistring

def CodePoint{n:Int32}
    def from_char(c:Char)->CodePoint
        return CodePoint{c as Int32}

    toupper := extern uc_toupper:(CodePoint)->CodePoint
    tolower := extern uc_tolower:(CodePoint)->CodePoint
    totitle := extern uc_totitle:(CodePoint)->CodePoint
            
    is_white_space := extern uc_is_property_white_space:(CodePoint)->Bool
    is_alphabetic := extern uc_is_property_alphabetic:(CodePoint)->Bool
    is_other_alphabetic := extern uc_is_property_other_alphabetic:(CodePoint)->Bool
    is_not_a_character := extern uc_is_property_not_a_character:(CodePoint)->Bool
    is_default_ignorable_code_point := extern uc_is_property_default_ignorable_code_point:(CodePoint)->Bool
    is_other_default_ignorable_code_point := extern uc_is_property_other_default_ignorable_code_point:(CodePoint)->Bool
    is_deprecated := extern uc_is_property_deprecated:(CodePoint)->Bool
    is_logical_order_exception := extern uc_is_property_logical_order_exception:(CodePoint)->Bool
    is_variation_selector := extern uc_is_property_variation_selector:(CodePoint)->Bool
    is_private_use := extern uc_is_property_private_use:(CodePoint)->Bool
    is_unassigned_code_value := extern uc_is_property_unassigned_code_value:(CodePoint)->Bool
    is_uppercase := extern uc_is_property_uppercase:(CodePoint)->Bool
    is_other_uppercase := extern uc_is_property_other_uppercase:(CodePoint)->Bool
    is_lowercase := extern uc_is_property_lowercase:(CodePoint)->Bool
    is_other_lowercase := extern uc_is_property_other_lowercase:(CodePoint)->Bool
    is_titlecase := extern uc_is_property_titlecase:(CodePoint)->Bool
    is_cased := extern uc_is_property_cased:(CodePoint)->Bool
    is_case_ignorable := extern uc_is_property_case_ignorable:(CodePoint)->Bool
    changes_when_lowercased := extern uc_is_property_changes_when_lowercased:(CodePoint)->Bool
    changes_when_uppercased := extern uc_is_property_changes_when_uppercased:(CodePoint)->Bool
    changes_when_titlecased := extern uc_is_property_changes_when_titlecased:(CodePoint)->Bool
    changes_when_casefolded := extern uc_is_property_changes_when_casefolded:(CodePoint)->Bool
    changes_when_casemapped := extern uc_is_property_changes_when_casemapped:(CodePoint)->Bool
    is_soft_dotted := extern uc_is_property_soft_dotted:(CodePoint)->Bool
    is_id_start := extern uc_is_property_id_start:(CodePoint)->Bool
    is_other_id_start := extern uc_is_property_other_id_start:(CodePoint)->Bool
    is_id_continue := extern uc_is_property_id_continue:(CodePoint)->Bool
    is_other_id_continue := extern uc_is_property_other_id_continue:(CodePoint)->Bool
    is_xid_start := extern uc_is_property_xid_start:(CodePoint)->Bool
    is_xid_continue := extern uc_is_property_xid_continue:(CodePoint)->Bool
    is_pattern_white_space := extern uc_is_property_pattern_white_space:(CodePoint)->Bool
    is_pattern_syntax := extern uc_is_property_pattern_syntax:(CodePoint)->Bool
    is_join_control := extern uc_is_property_join_control:(CodePoint)->Bool
    is_grapheme_base := extern uc_is_property_grapheme_base:(CodePoint)->Bool
    is_grapheme_extend := extern uc_is_property_grapheme_extend:(CodePoint)->Bool
    is_other_grapheme_extend := extern uc_is_property_other_grapheme_extend:(CodePoint)->Bool
    is_grapheme_link := extern uc_is_property_grapheme_link:(CodePoint)->Bool
    is_bidi_control := extern uc_is_property_bidi_control:(CodePoint)->Bool
    is_bidi_left_to_right := extern uc_is_property_bidi_left_to_right:(CodePoint)->Bool
    is_bidi_hebrew_right_to_left := extern uc_is_property_bidi_hebrew_right_to_left:(CodePoint)->Bool
    is_bidi_arabic_right_to_left := extern uc_is_property_bidi_arabic_right_to_left:(CodePoint)->Bool
    is_bidi_european_digit := extern uc_is_property_bidi_european_digit:(CodePoint)->Bool
    is_bidi_eur_num_separator := extern uc_is_property_bidi_eur_num_separator:(CodePoint)->Bool
    is_bidi_eur_num_terminator := extern uc_is_property_bidi_eur_num_terminator:(CodePoint)->Bool
    is_bidi_arabic_digit := extern uc_is_property_bidi_arabic_digit:(CodePoint)->Bool
    is_bidi_common_separator := extern uc_is_property_bidi_common_separator:(CodePoint)->Bool
    is_bidi_block_separator := extern uc_is_property_bidi_block_separator:(CodePoint)->Bool
    is_bidi_segment_separator := extern uc_is_property_bidi_segment_separator:(CodePoint)->Bool
    is_bidi_whitespace := extern uc_is_property_bidi_whitespace:(CodePoint)->Bool
    is_bidi_non_spacing_mark := extern uc_is_property_bidi_non_spacing_mark:(CodePoint)->Bool
    is_bidi_boundary_neutral := extern uc_is_property_bidi_boundary_neutral:(CodePoint)->Bool
    is_bidi_pdf := extern uc_is_property_bidi_pdf:(CodePoint)->Bool
    is_bidi_embedding_or_override := extern uc_is_property_bidi_embedding_or_override:(CodePoint)->Bool
    is_bidi_other_neutral := extern uc_is_property_bidi_other_neutral:(CodePoint)->Bool
    is_hex_digit := extern uc_is_property_hex_digit:(CodePoint)->Bool
    is_ascii_hex_digit := extern uc_is_property_ascii_hex_digit:(CodePoint)->Bool
    is_ideographic := extern uc_is_property_ideographic:(CodePoint)->Bool
    is_unified_ideograph := extern uc_is_property_unified_ideograph:(CodePoint)->Bool
    is_radical := extern uc_is_property_radical:(CodePoint)->Bool
    is_ids_binary_operator := extern uc_is_property_ids_binary_operator:(CodePoint)->Bool
    is_ids_trinary_operator := extern uc_is_property_ids_trinary_operator:(CodePoint)->Bool
    is_emoji := extern uc_is_property_emoji:(CodePoint)->Bool
    is_emoji_presentation := extern uc_is_property_emoji_presentation:(CodePoint)->Bool
    is_emoji_modifier := extern uc_is_property_emoji_modifier:(CodePoint)->Bool
    is_emoji_modifier_base := extern uc_is_property_emoji_modifier_base:(CodePoint)->Bool
    is_emoji_component := extern uc_is_property_emoji_component:(CodePoint)->Bool
    is_extended_pictographic := extern uc_is_property_extended_pictographic:(CodePoint)->Bool
    is_zero_width := extern uc_is_property_zero_width:(CodePoint)->Bool
    is_space := extern uc_is_property_space:(CodePoint)->Bool
    is_non_break := extern uc_is_property_non_break:(CodePoint)->Bool
    is_iso_control := extern uc_is_property_iso_control:(CodePoint)->Bool
    is_format_control := extern uc_is_property_format_control:(CodePoint)->Bool
    is_dash := extern uc_is_property_dash:(CodePoint)->Bool
    is_hyphen := extern uc_is_property_hyphen:(CodePoint)->Bool
    is_punctuation := extern uc_is_property_punctuation:(CodePoint)->Bool
    is_line_separator := extern uc_is_property_line_separator:(CodePoint)->Bool
    is_paragraph_separator := extern uc_is_property_paragraph_separator:(CodePoint)->Bool
    is_quotation_mark := extern uc_is_property_quotation_mark:(CodePoint)->Bool
    is_sentence_terminal := extern uc_is_property_sentence_terminal:(CodePoint)->Bool
    is_terminal_punctuation := extern uc_is_property_terminal_punctuation:(CodePoint)->Bool
    is_currency_symbol := extern uc_is_property_currency_symbol:(CodePoint)->Bool
    is_math := extern uc_is_property_math:(CodePoint)->Bool
    is_other_math := extern uc_is_property_other_math:(CodePoint)->Bool
    is_paired_punctuation := extern uc_is_property_paired_punctuation:(CodePoint)->Bool
    is_left_of_pair := extern uc_is_property_left_of_pair:(CodePoint)->Bool
    is_combining := extern uc_is_property_combining:(CodePoint)->Bool
    is_composite := extern uc_is_property_composite:(CodePoint)->Bool
    is_decimal_digit := extern uc_is_property_decimal_digit:(CodePoint)->Bool
    is_numeric := extern uc_is_property_numeric:(CodePoint)->Bool
    is_diacritic := extern uc_is_property_diacritic:(CodePoint)->Bool
    is_extender := extern uc_is_property_extender:(CodePoint)->Bool
    is_ignorable_control := extern uc_is_property_ignorable_control:(CodePoint)->Bool
    is_regional_indicator := extern uc_is_property_regional_indicator:(CodePoint)->Bool

// Opaque struct:
def uninorm_t{}
extend String
    def is_valid_utf8(s:String)->Bool
        u8_check := extern u8_check:(@CStringChar,Int)->?CStringChar
        err := u8_check(s.c_string(), #s)
        return err == !CStringChar

    def utf8_normalized(s:String)->String
        len := 0
        u8_normalize := (extern u8_normalize:(&uninorm_t,@CStringChar,Int,?CStringChar,&Int)->?CStringChar)
        buf := u8_normalize((extern &uninorm_nfd:uninorm_t), s.c_string(), #s, !CStringChar, &len) or fail "Couldn't normalize string: $s"
        defer (extern free:(@CStringChar)->Void)(buf)
        gc_alloc := extern GC_malloc_atomic:(Int)->@CStringChar
        memcpy := extern memcpy:(@CStringChar,@CStringChar,Int)->@CStringChar
        data := memcpy(gc_alloc(len+1), buf, len+1)
        return bitcast ({data=data, length=(len as Int32), stride=1i16, capacity=0i16}) as String

    def compare_utf8(s1:String, s2:String)->Int32
        u8_normcmp := extern u8_normcmp:(@CStringChar,Int,@CStringChar,Int,&uninorm_t,&Int32)->Int32
        ret := 0i32
        _ := u8_normcmp(s1.c_string(), #s1, s2.c_string(), #s2, (extern &uninorm_nfd:uninorm_t), &ret)
        return ret

    def utf8_length(s:String)->Int
        return (extern u8_mbsnlen:(@CStringChar,Int)->Int32)(s.c_string(), #s)

    def utf8_width(s:String)->Int
        setlocale := extern setlocale:(Int32,?CStringChar)->@CStringChar
        return (extern u8_width:(@CStringChar,Int,@CStringChar)->Int32)(s.c_string(), #s, setlocale(0i32,!CStringChar))

    def first_codepoint(s:String)->CodePoint
        len := (extern u8_mblen:(@CStringChar,Int)->Int32)(s.c_string(), #s)
        ret := 0i32
        u8_to_u32 := extern u8_to_u32:(@CStringChar,Int,&Int32,&Int)->?Int32
        first_len := 1
        _ := u8_to_u32(s[1..len].c_string(), len, &ret, &first_len)
        return CodePoint{ret}

    def codepoints(s:String)->[CodePoint]
        ret := [CodePoint{0i32} for _ in 1..s.utf8_length()]
        len := #ret
        u8_to_u32 := extern u8_to_u32:(@CStringChar,Int,?CodePoint,&Int)->?Int32
        _ := u8_to_u32(s.c_string(), #s, (bitcast ret as {data:@CodePoint,length:Int32,stride:Int16,capacity:Int16}).data, &len)
        return ret

    def from_codepoints(codepoints:[CodePoint])->String
        u32_to_u8 := extern u32_to_u8:(@CodePoint,Int,?Int32,@Int)->?CStringChar
        data_ptr := (bitcast codepoints as {data:?CodePoint,length:Int32,stride:Int16,capacity:Int16}).data or return ""
        len := @0
        buf := u32_to_u8(data_ptr, #codepoints, !Int32, len) or fail "Couldn't get UTF8 string from codepoints: $codepoints"
        defer (extern free:(@CStringChar)->Void)(buf)
        gc_alloc := extern GC_malloc_atomic:(Int)->@CStringChar
        memcpy := extern memcpy:(@CStringChar,@CStringChar,Int)->@CStringChar
        data := memcpy(gc_alloc(*len + 1), buf, *len + 1)
        return bitcast ({data=data, length=(*len as Int32), stride=1i16, capacity=0i16}) as String

    def uppercased(str:String)->String
        toupper := extern uc_toupper:(CodePoint)->CodePoint
        return String.from_codepoints([toupper(c) for c in str.codepoints()])

    def lowercased(str:String)->String
        tolower := extern uc_tolower:(CodePoint)->CodePoint
        return String.from_codepoints([tolower(c) for c in str.codepoints()])

    def titlecased(str:String)->String
        points := str.codepoints()
        prev_alpha := no
        is_alphabetic := extern uc_is_property_alphabetic:(CodePoint)->Bool
        tolower := extern uc_tolower:(CodePoint)->CodePoint
        totitle := extern uc_totitle:(CodePoint)->CodePoint
        return String.from_codepoints([
            for c in points
                if prev_alpha
                    prev_alpha = is_alphabetic(c)
                    tolower(c)
                else
                    if is_alphabetic(c)
                        prev_alpha = yes
                        totitle(c)
                    else
                        prev_alpha = no
                        c
        ])
