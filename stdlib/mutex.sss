!link -lpthread

type Mutex := @Memory
    func new()->Mutex
        mutex := extern GC_malloc(40u64):Mutex
        pthread_mutex_init := extern pthread_mutex_init:(Mutex,?Memory)->Int32
        if extern pthread_mutex_init(mutex, !Memory):CError != CError.SUCCESS
            fail "Mutex failed to initialize"
        cleanup := extern pthread_mutex_destroy:(Mutex,?Memory)->Void
        extern GC_register_finalizer(mutex, cleanup, !Memory, !Memory, !Memory)
        return mutex

    func lock(mutex:Mutex)->MutexLock
        if extern pthread_mutex_lock(mutex):CError != CError.SUCCESS
            fail "Mutex failed to lock: $(extern last_err():Str)"
        return MutexLock{mutex}
    
    // enum MutexLockResult := AcquiredLock(lock:MutexLock) | Busy
    // func try_lock(mutex:Mutex)->MutexLockResult
    //     if extern pthread_mutex_lock(mutex):CError matches SUCCESS
    //         return AcquiredLock(MutexLock{mutex})
    //     matches EBUSY
    //         return Busy
    //     else
    //         fail "Mutex failed to lock!"

    func unlock(mutex:Mutex)
        if extern pthread_mutex_unlock(mutex):CError != CError.SUCCESS
            fail "Mutex failed to lock!"

type MutexLock := struct(mutex:Mutex)
    func close(lock:MutexLock)
        lock.mutex.unlock()

type Condition := @Memory
    func new()->Condition
        cond := extern GC_malloc(48u64):Condition
        if extern pthread_cond_init(cond, !Memory):CError != CError.SUCCESS
            fail "Condition failed to initialize"

        cleanup := extern pthread_cond_destroy:(Condition,?Memory)->Void
        extern GC_register_finalizer(cond, cleanup, !Memory, !Memory, !Memory)
        return cond

    func announce_change(cond:Condition, broadcast=no)
        result := if broadcast
            extern pthread_cond_broadcast(cond):CError
        else
            extern pthread_cond_signal(cond):CError

        if result != CError.SUCCESS
            fail "Failed to signal condition has changed"
        
    func wait_for_change(cond:Condition, mutex:Mutex)
        // wait := extern pthread_cond_timedwait:(Condition,Mutex,&{UInt,UInt})->Int32
        if extern pthread_cond_wait(cond, mutex):CError != CError.SUCCESS
            fail "Failed to wait for condition change"
        // while wait(cond, mutex, &{0u64, 100u64}) != 0i32
        //     skip
            // fail "Failed to wait for condition change"
