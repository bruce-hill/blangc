!link -llfds

alias Entry::@Memory
    func new(value=!Memory)->Entry
        e := extern GC_malloc(24u64):Entry
        e.set_value(value)
        return e

    func get_value(e:Entry)->?Memory
        return (bitcast ((bitcast e as UInt)+16u64) as @?Memory)[]

    func set_value(e:Entry, value:?Memory)
        (bitcast ((bitcast e as UInt)+16u64) as @?Memory)[] = value

enum DequeueResult := Empty | Value(data:?Memory)

alias Queue::@Memory
    func new()->Queue
        q := extern GC_malloc(768u64):Queue
        dummy := Entry.new()
        extern lfds711_queue_umm_init_valid_on_current_logical_core(q, dummy, !Memory)
        cleanup := extern lfds711_queue_umm_cleanup:(Queue,?Memory)->Void
        extern GC_register_finalizer(q, cleanup, !Memory, !Memory, !Memory)
        return q
    
    func enqueue(q:Queue, value:?Memory)
        extern lfds711_queue_umm_enqueue(q, Entry.new(value))

    func dequeue(q:Queue)->?Memory
        repeat if q.try_dequeue() matches Value(v)
            return v
        else
            extern usleep(10u64)
        fail

    func try_dequeue(q:Queue)->DequeueResult
        entry := Entry.new()
        if extern lfds711_queue_umm_dequeue(q, &entry):Bool
            return Value(entry.get_value())
        else
            return Empty

new := Queue.new

if IS_MAIN_PROGRAM
    >>> q := Queue.new()
    say "Initialized!"
    for i in 10..15 do q.enqueue(@i)
    say "All queued up"
    >>> [repeat if q.try_dequeue() matches Value(v) then (bitcast v as @Int) else stop]
