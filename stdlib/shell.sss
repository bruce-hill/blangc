// Defines a DSL for shell commands and a way to run them safely

// Opaque value:
type _POpenFile := Memory

type Sh := Str
    func run(sh:Sh)->struct(output:Str,status:Int32)
        f := extern popen((bitcast sh as Str).c_string(), &`r):?_POpenFile or return {output="", status=-1i32}
        output := extern sss_readfile(&f, Int64.max):Str
        status := extern pclose(f):Int32
        if status >= 0
            status = (status / 256i32) and 0xFFi32
        return {output=output, status=status}

    func run_with(sh:Sh, input:Str)->Int32
        f := extern popen("$sh".c_string(), &`w):?_POpenFile or return -1i32
        extern fwrite(input.c_string(), 1u64, input.length as UInt64, f)
        status := extern pclose(f):Int32
        if status >= 0
            status = (status / 256i32) and 0xFFi32
        return status

    convert s:Str as Sh
        return bitcast "'$(s.replace("'",${'"'"'}))'" as Sh

    convert strs:[Str] as Sh
        return bitcast [
            for s in strs
                ++Sh::"$s"
            between
                ++" "
        ] as Sh

    convert strings:[Str] as Sh
        return bitcast [
            for s in strings
                c for c in Sh::"$s"
            between
                ` 
        ] as Sh

    convert i:Int64 as Sh
        return bitcast "$i" as Sh

    convert n:Num as Sh
        return bitcast "$n" as Sh

if IS_MAIN_PROGRAM
    >>> files := ["one two", "three; four", "doesn't break"]
    >>> Sh::$> ls -al @files
    === Sh::"ls -al 'one two' 'three; four' 'doesn'\"'\"'t break'"
    >>> Sh::$(echo "hi").run()
    === {output="hi\n", status=0_i32}
